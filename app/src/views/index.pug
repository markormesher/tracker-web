-
	function formatDuration(duration) {
		duration = duration / 1000;
		var mins = Math.floor(duration / 60) % 60
		var hours = Math.floor(duration / (60 * 60))
		if (hours > 0) {
			return hours + 'h ' + mins + 'm';
		} else {
			return mins + 'm';
		}
	}

	function round(number, precision) {
		var factor = Math.pow(10, precision);
		return Math.round(number * factor) / factor;
	}

doctype html
html
	head
		title Tracker
		link(rel = 'stylesheet', href = '/_npm/bootstrap/dist/css/bootstrap.min.css')
		link(rel = 'stylesheet', href = '/_npm/font-awesome/css/font-awesome.min.css')
		link(rel = 'stylesheet', href = '/global/custom.css')
		link(rel = 'icon', href = '/global/favicon.png', type = 'image/x-icon')
		link(rel = 'shortcut icon', href = '/global/favicon.png', type = 'image/x-icon')
		meta(name = 'viewport', content = 'width=device-width, initial-scale=1')

	body.nav-md

		div.container

			// insights

			div.row

				- const workoutsPerWeek = round(daysWithActivity['Exercise'].length / totalDays * 7, 1)
				- const sleepPerNight = formatDuration(totalDurationPerActivity['Sleeping'] / (totalDays - 1))
				- const workHoursPerWeek = formatDuration(totalDurationPerActivity['Work'] / totalDays * 7)
				- const projectHoursPerWeek = formatDuration(totalDurationPerActivity['Personal projects'] / totalDays * 7)

				div.col-sm-12.col-md-3: div.stat-card
					div.stat: span.colourise(data-key = 'Sleeping')= sleepPerNight
					div.icon: i.fa.fa-bed.colourise(data-key = 'Sleeping')
					div.title sleep/night

				div.col-sm-12.col-md-3: div.stat-card
					div.stat: span.colourise(data-key = 'Exercise')= workoutsPerWeek
					div.icon: i.fa.fa-heartbeat.colourise(data-key = 'Exercise')
					div.title workouts/week

				div.col-sm-12.col-md-3: div.stat-card
					div.stat: span.colourise(data-key = 'Work')= workHoursPerWeek
					div.icon: i.fa.fa-briefcase.colourise(data-key = 'Work')
					div.title work/week

				div.col-sm-12.col-md-3: div.stat-card
					div.stat: span.colourise(data-key = 'Personal projects')= projectHoursPerWeek
					div.icon: i.fa.fa-wrench.colourise(data-key = 'Personal projects')
					div.title project work/week

			// summary

			-
				var percentageBlocks = []
				for (var title in percentageDurationPerActivity) {
					if (percentageDurationPerActivity.hasOwnProperty(title)) {
						percentageBlocks.push([title, percentageDurationPerActivity[title]])
					}
				}
				percentageBlocks.sort(function(a, b) { return b[1] - a[1] })

			div.row: div.col-sm-12
				h3 Summary
				div.block-container(style = 'height: 80px')
					each block in percentageBlocks
						- const title = block[0]
						- const percentage = block[1]
						- const width = (percentage * 100) + '%'
						- var tooltip = `${title}: ${round(percentage * 100, 1)}%<br />`
						- tooltip += `(${formatDuration(totalDurationPerActivity[title])})`

						div.block.full.colourise(
							data-key = title,
							data-toggle = 'tooltip',
							data-html = 'true',
							title != tooltip,
							style = 'width: ' + width
						)
				ul.legend
					each block in percentageBlocks
						li
							div.blob.colourise(data-key = block[0])
							| #{block[0]}

			// raw log

			div.row: div.col-sm-12
				h3 Raw Log
				div.block-container
					- var rowSum = 0
					- const maxRowSum = 24 * 60 * 60 * 1000
					each entry in entries
						-
							var duration = 0
							for (let i = 0; i < entry.periods.length; ++i) {
								duration += entry.periods[i].getDuration();
							}
							const tooltip = `${entry.title}: ${formatDuration(duration)}`

						while duration > 0
							- var chunkSize = Math.min(duration, maxRowSum - rowSum)
							- var width = (chunkSize / maxRowSum * 100) + '%'

							div.block.colourise(
								data-family = entry.id,
								data-key = entry.title,
								data-toggle = 'tooltip',
								title = tooltip,
								style = 'width: ' + width
							)

							- duration -= chunkSize
							- rowSum += chunkSize
							- if (rowSum === maxRowSum) rowSum = 0

			// footer

			-
				var lastSync = 'never';
				if (entries && entries.length > 0) {
					const lastEntry = entries[entries.length - 1]
					const lastPeriod = lastEntry.periods[lastEntry.periods.length - 1]
					const lastEntryEnd = lastPeriod.end.valueOf()
					lastSync = formatDuration(new Date().getTime() - lastEntryEnd) + ' ago'
				}

			div.hr: hr

			div.row: div.col-sm-12
				p.text-muted.pull-left Last sync: #{lastSync}
				p.text-muted.pull-right Data and design &copy; Mark Ormesher #{new Date().getFullYear()}

			script(src = '/_npm/jquery/dist/jquery.min.js')
			script(src = '/_npm/bootstrap/dist/js/bootstrap.min.js')

			script(src = '/global/bundle.js')
