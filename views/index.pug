-
	function formatDuration(duration) {
		var mins = Math.floor(duration / 60) % 60
		var hours = Math.floor(duration / (60 * 60))
		if (hours > 0) {
			return hours + 'h ' + mins + 'm';
		} else {
			return mins + 'm';
		}
	}

	function round(number, precision) {
		var factor = Math.pow(10, precision);
		return Math.round(number * factor) / factor;
	}

doctype html
html
	head
		title Tracker
		link(rel = 'stylesheet', href = '/_npm/bootstrap/dist/css/bootstrap.min.css')
		link(rel = 'stylesheet', href = '/_npm/font-awesome/css/font-awesome.min.css')
		link(rel = 'stylesheet', href = '/global/custom.css')
		meta(name = 'viewport', content = 'width=device-width, initial-scale=1')

	body.nav-md

		-
			var lastSyncRaw = entries[entries.length - 1].endTime.toISOString()
			var lastSync = lastSyncRaw.substr(0, 10) + ' ' + lastSyncRaw.substr(11, 8)


		div.container

			div.row: div.col-sm-12
				h1 Time Tracker
				p.text-muted Last sync: #{lastSync}

			// insights

			div.row

				- workoutsPerWeek = round(daysWithExercise.length / numDays * 7, 1)
				- sleepPerNight = round(totalDurationPerActivity['Sleeping'] / (numDays - 1) / 60 / 60, 1) + 'h'
				- workHoursPerWeek = round(totalDurationPerActivity['Work'] / numDays / 60 / 60 * 7, 1) + 'h'
				- projectHoursPerWeek = round(totalDurationPerActivity['Personal projects'] / numDays / 60 / 60 * 7, 1) + 'h'

				div.col-sm-12.col-md-3: div.stat-card
					div.stat: span.colourise(data-key = 'Sleeping')= sleepPerNight
					div.icon: i.fa.fa-bed.colourise(data-key = 'Sleeping')
					div.title sleep/night

				div.col-sm-12.col-md-3: div.stat-card
					div.stat: span.colourise(data-key = 'Exercise')= workoutsPerWeek
					div.icon: i.fa.fa-heartbeat.colourise(data-key = 'Exercise')
					div.title workouts/week

				div.col-sm-12.col-md-3: div.stat-card
					div.stat: span.colourise(data-key = 'Work')= workHoursPerWeek
					div.icon: i.fa.fa-briefcase.colourise(data-key = 'Work')
					div.title work/week

				div.col-sm-12.col-md-3: div.stat-card
					div.stat: span.colourise(data-key = 'Personal projects')= projectHoursPerWeek
					div.icon: i.fa.fa-wrench.colourise(data-key = 'Personal projects')
					div.title project work/week

			// summary

			-
				var percentageBlocks = []
				for (var title in percentagePerActivity)
					if (percentagePerActivity.hasOwnProperty(title))
						percentageBlocks.push([title, percentagePerActivity[title]])
				percentageBlocks.sort(function(a, b) { return b[1] - a[1] })

			div.row: div.col-sm-12
				h3 Summary
				div.block-container(style = 'height: 80px')
					each block in percentageBlocks
						- title = block[0]
						- percentage = block[1]
						- width = (percentage * 100) + '%'
						- tooltip = `${title}: ${round(percentage * 100, 1)}%<br />`
						- tooltip += `(${formatDuration(totalDurationPerActivity[title])})`

						div.block.full.colourise(
							data-key = title,
							data-toggle = 'tooltip',
							data-html = 'true',
							title != tooltip,
							style = 'width: ' + width
						)
				ul.legend
					each block in percentageBlocks
						li
							div.blob.colourise(data-key = block[0])
							| #{block[0]}

			// raw log

			div.row: div.col-sm-12
				h3 Raw Log
				div.block-container
					- rowSum = 0
					- maxRowSum = 24 * 60 * 60
					each entry in entries
						- duration = entry.duration
						- tooltip = `${entry.title}: ${formatDuration(entry.duration)}`

						while duration > 0
							- chunkSize = Math.min(duration, maxRowSum - rowSum)
							- width = (chunkSize / maxRowSum * 100) + '%'

							div.block.colourise(
								data-family = entry.id,
								data-key = entry.title,
								data-toggle = 'tooltip',
								title = tooltip,
								style = 'width: ' + width
							)

							- duration -= chunkSize
							- rowSum += chunkSize
							- if (rowSum === maxRowSum) rowSum = 0

			script(src = '/_npm/jquery/dist/jquery.min.js')
			script(src = '/_npm/bootstrap/dist/js/bootstrap.min.js')

			script(src = '/global/bundle.js')
